// <auto-generated />
using System;
using AttendanceRecordsSystem.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace AttendanceRecordsSystem.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AttendanceRecordsSystemContext))]
    partial class AttendanceRecordsSystemContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("AttendanceRecordsSystem.Domain.Core.Lection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'13', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LectorId")
                        .HasColumnType("integer");

                    b.Property<int>("Mark")
                        .HasColumnType("integer");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<string>("Tittle")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LectorId");

                    b.HasIndex("StudentId");

                    b.ToTable("Lections");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2022, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LectorId = 1,
                            Mark = 4,
                            StudentId = 1,
                            Tittle = "Математика"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2022, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LectorId = 1,
                            Mark = 4,
                            StudentId = 3,
                            Tittle = "Математика"
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2022, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LectorId = 1,
                            Mark = 5,
                            StudentId = 4,
                            Tittle = "Математика"
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2022, 3, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LectorId = 1,
                            Mark = 5,
                            StudentId = 1,
                            Tittle = "Физика"
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2022, 3, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LectorId = 1,
                            Mark = 5,
                            StudentId = 2,
                            Tittle = "Физика"
                        },
                        new
                        {
                            Id = 6,
                            Date = new DateTime(2022, 3, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LectorId = 1,
                            Mark = 3,
                            StudentId = 3,
                            Tittle = "Физика"
                        },
                        new
                        {
                            Id = 7,
                            Date = new DateTime(2022, 3, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LectorId = 1,
                            Mark = 3,
                            StudentId = 4,
                            Tittle = "Физика"
                        },
                        new
                        {
                            Id = 8,
                            Date = new DateTime(2022, 3, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LectorId = 2,
                            Mark = 3,
                            StudentId = 1,
                            Tittle = "Философия"
                        },
                        new
                        {
                            Id = 9,
                            Date = new DateTime(2022, 3, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LectorId = 2,
                            Mark = 4,
                            StudentId = 4,
                            Tittle = "Философия"
                        },
                        new
                        {
                            Id = 10,
                            Date = new DateTime(2022, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LectorId = 2,
                            Mark = 3,
                            StudentId = 2,
                            Tittle = "Литература"
                        },
                        new
                        {
                            Id = 11,
                            Date = new DateTime(2022, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LectorId = 2,
                            Mark = 5,
                            StudentId = 3,
                            Tittle = "Литература"
                        },
                        new
                        {
                            Id = 12,
                            Date = new DateTime(2022, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LectorId = 2,
                            Mark = 2,
                            StudentId = 4,
                            Tittle = "Литература"
                        });
                });

            modelBuilder.Entity("AttendanceRecordsSystem.Domain.Core.Lector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'3', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Lectors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Ирина",
                            LastName = "Сахарова",
                            Patronymic = "Петровна"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Иван",
                            LastName = "Лопатин",
                            Patronymic = "Денисович"
                        });
                });

            modelBuilder.Entity("AttendanceRecordsSystem.Domain.Core.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'5', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<int>("StudentsGroupId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StudentsGroupId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Ольга",
                            LastName = "Ласкина",
                            StudentsGroupId = 1
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Тамара",
                            LastName = "Комарова",
                            StudentsGroupId = 1
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Владимир",
                            LastName = "Семёнов",
                            StudentsGroupId = 2
                        },
                        new
                        {
                            Id = 4,
                            FirstName = "Игорь",
                            LastName = "Онисьев",
                            StudentsGroupId = 2
                        });
                });

            modelBuilder.Entity("AttendanceRecordsSystem.Domain.Core.StudentsGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'3', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("StudentsGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "А1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "А2"
                        });
                });

            modelBuilder.Entity("AttendanceRecordsSystem.Domain.Core.Lection", b =>
                {
                    b.HasOne("AttendanceRecordsSystem.Domain.Core.Lector", "Lector")
                        .WithMany("Lections")
                        .HasForeignKey("LectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AttendanceRecordsSystem.Domain.Core.Student", "Student")
                        .WithMany("AttendedLections")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AttendanceRecordsSystem.Domain.Core.Student", b =>
                {
                    b.HasOne("AttendanceRecordsSystem.Domain.Core.StudentsGroup", "Group")
                        .WithMany("Students")
                        .HasForeignKey("StudentsGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
